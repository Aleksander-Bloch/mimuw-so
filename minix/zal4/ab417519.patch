diff -rupNEZbB original/usr/src/include/unistd.h solution/usr/src/include/unistd.h
--- original/usr/src/include/unistd.h	2014-09-13 23:56:50.000000000 +0200
+++ solution/usr/src/include/unistd.h	2023-06-01 18:20:35.514487311 +0200
@@ -69,6 +69,7 @@
 #include <sys/featuretest.h>
 #include <sys/types.h>
 #include <sys/unistd.h>
+#include <stdbool.h> // ab417519
 
 #if _FORTIFY_SOURCE > 0
 #include <ssp/unistd.h>
@@ -143,6 +144,7 @@ int	 tcsetpgrp(int, pid_t);
 __aconst char *ttyname(int);
 int	 unlink(const char *);
 ssize_t	 write(int, const void *, size_t);
+int sched_deadline(int64_t deadline, int64_t estimate, bool kill); // ab417519
 
 
 /*
diff -rupNEZbB original/usr/src/lib/libc/misc/Makefile.inc solution/usr/src/lib/libc/misc/Makefile.inc
--- original/usr/src/lib/libc/misc/Makefile.inc	2014-09-13 23:56:50.000000000 +0200
+++ solution/usr/src/lib/libc/misc/Makefile.inc	2023-06-01 17:40:16.894347252 +0200
@@ -7,4 +7,4 @@
 SRCS+=	initfini.c
 
 # for -fstack-protector
-SRCS+=	stack_protector.c
+SRCS+=	stack_protector.c sched_deadline.c
diff -rupNEZbB original/usr/src/lib/libc/misc/sched_deadline.c solution/usr/src/lib/libc/misc/sched_deadline.c
--- original/usr/src/lib/libc/misc/sched_deadline.c	1970-01-01 01:00:00.000000000 +0100
+++ solution/usr/src/lib/libc/misc/sched_deadline.c	2023-06-01 20:55:56.791753381 +0200
@@ -0,0 +1,23 @@
+/* ab417519 */
+#include <lib.h>
+#include <minix/rs.h>
+
+int get_pm_endpt(endpoint_t *pt)
+{
+    return minix_rs_lookup("pm", pt);
+}
+
+int sched_deadline(int64_t deadline, int64_t estimate, bool kill)
+{
+    endpoint_t pm_pt;
+    message m;
+    if (get_pm_endpt(&pm_pt) != 0)
+    {
+        errno = ENOSYS;
+        return -1;
+    }
+    m.m_sched_deadline.deadline = deadline;
+    m.m_sched_deadline.estimate = estimate;
+    m.m_sched_deadline.kill = kill;
+    return (_syscall(pm_pt, PM_SCHED_DEADLINE, &m));
+}
diff -rupNEZbB original/usr/src/minix/include/minix/callnr.h solution/usr/src/minix/include/minix/callnr.h
--- original/usr/src/minix/include/minix/callnr.h	2014-09-13 23:56:50.000000000 +0200
+++ solution/usr/src/minix/include/minix/callnr.h	2023-06-01 12:42:21.904521130 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_SCHED_DEADLINE     (PM_BASE + 48) // ab417519
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */ // ab417519
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupNEZbB original/usr/src/minix/include/minix/com.h solution/usr/src/minix/include/minix/com.h
--- original/usr/src/minix/include/minix/com.h	2014-09-13 23:56:50.000000000 +0200
+++ solution/usr/src/minix/include/minix/com.h	2023-06-01 17:23:02.872701541 +0200
@@ -763,6 +763,7 @@
 #define SCHEDULING_STOP		(SCHEDULING_BASE+3)
 #define SCHEDULING_SET_NICE	(SCHEDULING_BASE+4)
 #define SCHEDULING_INHERIT	(SCHEDULING_BASE+5)
+#define SCHEDULING_SCHED_DEADLINE (SCHEDULING_BASE+6) // ab417519
 
 /*===========================================================================*
  *              Messages for USB                                             *
diff -rupNEZbB original/usr/src/minix/include/minix/config.h solution/usr/src/minix/include/minix/config.h
--- original/usr/src/minix/include/minix/config.h	2014-09-13 23:56:50.000000000 +0200
+++ solution/usr/src/minix/include/minix/config.h	2023-06-01 12:42:21.928521399 +0200
@@ -95,4 +95,8 @@
 #define NR_PCIBUS 40
 #define NR_PCIDEV 50
 
+// ab417519
+#define DEADLINE_Q 8
+#define PENALTY_Q 14
+
 #endif /* _CONFIG_H */
diff -rupNEZbB original/usr/src/minix/include/minix/ipc.h solution/usr/src/minix/include/minix/ipc.h
--- original/usr/src/minix/include/minix/ipc.h	2014-09-13 23:56:50.000000000 +0200
+++ solution/usr/src/minix/include/minix/ipc.h	2023-06-02 21:20:28.694894717 +0200
@@ -6,6 +6,7 @@
 #include <minix/const.h>
 #include <sys/signal.h>
 #include <sys/types.h>
+#include <stdbool.h> // ab417519
 
 /*==========================================================================* 
  * Types relating to messages. 						    *
@@ -983,13 +984,16 @@ typedef struct {
 } mess_lsys_krn_schedctl;
 _ASSERT_MSG_SIZE(mess_lsys_krn_schedctl);
 
+/* ab417519 */
 typedef struct {
 	endpoint_t endpoint;
 	int quantum;
 	int priority;
 	int cpu;
+    int64_t deadline;
+    int64_t estimate;
 
-	uint8_t padding[40];
+	uint8_t padding[24];
 } mess_lsys_krn_schedule;
 _ASSERT_MSG_SIZE(mess_lsys_krn_schedule);
 
@@ -2023,6 +2027,16 @@ typedef struct {
 } mess_vmmcp_reply;
 _ASSERT_MSG_SIZE(mess_vmmcp_reply);
 
+// ab417519
+typedef struct {
+    endpoint_t endpoint;
+    int64_t deadline;
+    int64_t estimate;
+    bool kill;
+    uint8_t padding[32];
+} mess_sched_deadline;
+_ASSERT_MSG_SIZE(mess_sched_deadline);
+
 typedef struct {
 	endpoint_t m_source;		/* who sent the message */
 	int m_type;			/* what kind of message is it */
@@ -2251,6 +2265,7 @@ typedef struct {
 		mess_vm_vfs_mmap	m_vm_vfs_mmap;
 		mess_vmmcp		m_vmmcp;
 		mess_vmmcp_reply	m_vmmcp_reply;
+        mess_sched_deadline m_sched_deadline; // ab417519
 
 		u8_t size[56];	/* message payload may have 56 bytes at most */
 	};
diff -rupNEZbB original/usr/src/minix/include/minix/syslib.h solution/usr/src/minix/include/minix/syslib.h
--- original/usr/src/minix/include/minix/syslib.h	2014-09-13 23:56:50.000000000 +0200
+++ solution/usr/src/minix/include/minix/syslib.h	2023-06-03 17:40:23.907727272 +0200
@@ -38,7 +38,7 @@ int sys_exit(void);
 int sys_trace(int req, endpoint_t proc_ep, long addr, long *data_p);
 
 int sys_schedule(endpoint_t proc_ep, int priority, int quantum, int
-	cpu);
+	cpu, int64_t deadline, int64_t estimate); // ab417519
 int sys_schedctl(unsigned flags, endpoint_t proc_ep, int priority, int
 	quantum, int cpu);
 
diff -rupNEZbB original/usr/src/minix/kernel/proc.c solution/usr/src/minix/kernel/proc.c
--- original/usr/src/minix/kernel/proc.c	2014-09-13 23:56:50.000000000 +0200
+++ solution/usr/src/minix/kernel/proc.c	2023-06-04 22:42:33.591342250 +0200
@@ -1520,6 +1520,108 @@ asyn_error:
   return(OK);
 }
 
+/* ab417519 */
+static int64_t get_now(void) {
+    clock_t realtime = get_realtime();
+    int64_t now_sec = (boottime + realtime / system_hz);
+    int64_t now_nsec = (realtime % system_hz) * 1000000000LL / system_hz;
+    int64_t now_in_ms = now_sec * 1000LL + now_nsec / 1000000LL;
+    return now_in_ms;
+}
+
+/* ab417519 */
+static bool validate_and_insert(struct proc **head, struct proc *process,
+                                int64_t now, struct proc *found_first_in_front) {
+    struct proc *current;
+    if (found_first_in_front == NULL) {
+        // We did not find a place where process would terminate within its deadline.
+        // Our best bet is to place it in front of the queue.
+        current = *head;
+    }
+    else {
+        current = found_first_in_front->p_nextready;
+    }
+
+    int sum = 0;
+    struct proc *temp = *head;
+    while (temp != current) {
+        sum += temp->estimate;
+        temp = temp->p_nextready;
+    }
+
+    while (current != NULL) {
+        if (now + sum + current->estimate <= current->deadline &&
+            now + sum + current->estimate + process->estimate > current->deadline) {
+            return false;
+        }
+        sum += current->estimate;
+        current = current->p_nextready;
+    }
+
+    // Using this strategy was successful.
+    // Now we can insert the node in the right place.
+
+    if (found_first_in_front == NULL) {
+        process->p_nextready = *head;
+        *head = process;
+    }
+    else {
+        temp = found_first_in_front->p_nextready;
+        found_first_in_front->p_nextready = process;
+        process->p_nextready = temp;
+    }
+
+    return true;
+}
+
+/* ab417519 */
+// We assume that the queue is non-empty and head is not NULL.
+// First strategy: try to insert new process into the queue in such a way
+// that it terminates within a deadline.
+// Also, any processes that will be behind him, should also terminate within
+// their deadlines if they managed to do so before new process was inserted.
+static bool execute_first_strategy(struct proc **head, struct proc *process, int64_t now) {
+    int sum = 0;
+    struct proc *found_first_in_front = NULL; // First node in front of process
+    struct proc *current = *head;
+
+    while (current != NULL) {
+        sum += current->estimate;
+        if (now + sum + process->estimate <= process->deadline) {
+            found_first_in_front = current;
+        }
+        current = current->p_nextready;
+    }
+
+    return validate_and_insert(head, process, now, found_first_in_front);
+}
+
+/* ab417519 */
+// We assume that the queue is non-empty and head is not NULL.
+// In this strategy, we want to place new process p in such a way that
+// its estimate is greater or equal to (p-1)'s estimate and
+// is less than or equal to (p+1)'s estimate.
+// Also, all the processes that are behind p should terminate within their
+// deadlines if they managed to do it before p was inserted.
+static bool execute_second_strategy(struct proc **head, struct proc *process, int64_t now) {
+    struct proc *current = *head;
+    struct proc *found_first_in_front = NULL;
+
+    while (current != NULL) {
+        if (process->estimate >= current->estimate &&
+            (current->p_nextready == NULL || process->estimate <= current->p_nextready->estimate)) {
+            found_first_in_front = current;
+        }
+        current = current->p_nextready;
+    }
+
+    if (found_first_in_front == NULL && process->estimate > (*head)->estimate) {
+        return false;
+    }
+
+    return validate_and_insert(head, process, now, found_first_in_front);
+}
+
 /*===========================================================================*
  *				enqueue					     * 
  *===========================================================================*/
@@ -1550,11 +1652,19 @@ void enqueue(
       rdy_head[q] = rdy_tail[q] = rp; 		/* create a new queue */
       rp->p_nextready = NULL;		/* mark new end */
   } 
-  else {					/* add to tail of queue */
+  else {
+      /* ab417519 */
+      int64_t now = get_now();
+      if ((q == DEADLINE_Q &&
+          !execute_first_strategy(&(rdy_head[q]), rp, now) &&
+          !execute_second_strategy(&(rdy_head[q]), rp, now)) ||
+          q != DEADLINE_Q) {
+          /* add to tail of queue */
       rdy_tail[q]->p_nextready = rp;		/* chain tail of queue */	
       rdy_tail[q] = rp;				/* set new queue tail */
       rp->p_nextready = NULL;		/* mark new end */
   }
+  }
 
   if (cpuid == rp->p_cpu) {
 	  /*
diff -rupNEZbB original/usr/src/minix/kernel/proc.h solution/usr/src/minix/kernel/proc.h
--- original/usr/src/minix/kernel/proc.h	2014-09-13 23:56:50.000000000 +0200
+++ solution/usr/src/minix/kernel/proc.h	2023-06-04 21:18:04.701271819 +0200
@@ -131,6 +131,10 @@ struct proc {
 #if DEBUG_TRACE
   int p_schedules;
 #endif
+
+  /* ab417519 */
+  int64_t deadline;
+  int64_t estimate;
 };
 
 #endif /* __ASSEMBLY__ */
diff -rupNEZbB original/usr/src/minix/kernel/system/do_schedule.c solution/usr/src/minix/kernel/system/do_schedule.c
--- original/usr/src/minix/kernel/system/do_schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ solution/usr/src/minix/kernel/system/do_schedule.c	2023-06-03 19:35:22.371506641 +0200
@@ -25,5 +25,9 @@ int do_schedule(struct proc * caller, me
 	quantum = m_ptr->m_lsys_krn_schedule.quantum;
 	cpu = m_ptr->m_lsys_krn_schedule.cpu;
 
+    /* ab417519 */
+    p->deadline = m_ptr->m_lsys_krn_schedule.deadline;
+    p->estimate = m_ptr->m_lsys_krn_schedule.estimate;
+
 	return sched_proc(p, priority, quantum, cpu);
 }
diff -rupNEZbB original/usr/src/minix/lib/libsys/sys_schedule.c solution/usr/src/minix/lib/libsys/sys_schedule.c
--- original/usr/src/minix/lib/libsys/sys_schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ solution/usr/src/minix/lib/libsys/sys_schedule.c	2023-06-03 17:40:23.927727183 +0200
@@ -1,9 +1,12 @@
 #include "syslib.h"
 
+/* ab417519 */
 int sys_schedule(endpoint_t proc_ep,
 			int priority,
 			int quantum,
-			int cpu)
+			int cpu,
+            int64_t deadline,
+            int64_t estimate)
 {
 	message m;
 
@@ -11,5 +14,7 @@ int sys_schedule(endpoint_t proc_ep,
 	m.m_lsys_krn_schedule.priority = priority;
 	m.m_lsys_krn_schedule.quantum  = quantum;
 	m.m_lsys_krn_schedule.cpu = cpu;
+    m.m_lsys_krn_schedule.deadline = deadline;
+    m.m_lsys_krn_schedule.estimate = estimate;
 	return(_kernel_call(SYS_SCHEDULE, &m));
 }
diff -rupNEZbB original/usr/src/minix/servers/pm/proto.h solution/usr/src/minix/servers/pm/proto.h
--- original/usr/src/minix/servers/pm/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ solution/usr/src/minix/servers/pm/proto.h	2023-06-01 20:55:56.779753039 +0200
@@ -51,6 +51,7 @@ int do_getrusage(void);
 void sched_init(void);
 int sched_start_user(endpoint_t ep, struct mproc *rmp);
 int sched_nice(struct mproc *rmp, int nice);
+int do_sched_deadline(void); // ab417519
 
 /* profile.c */
 int do_sprofile(void);
diff -rupNEZbB original/usr/src/minix/servers/pm/schedule.c solution/usr/src/minix/servers/pm/schedule.c
--- original/usr/src/minix/servers/pm/schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ solution/usr/src/minix/servers/pm/schedule.c	2023-06-01 20:55:56.763752583 +0200
@@ -110,3 +110,25 @@ int sched_nice(struct mproc *rmp, int ni
 
 	return (OK);
 }
+
+/* ab417519 */
+/*===========================================================================*
+ *				do_sched_deadline				     *
+ *===========================================================================*/
+int do_sched_deadline(void)
+{
+    int rv;
+
+    /* If the kernel is the scheduler, we don't allow messing with the
+     * priority. If you want to control process priority, assign the process
+     * to a user-space scheduler */
+    if (mp->mp_scheduler == KERNEL || mp->mp_scheduler == NONE)
+        return (EINVAL);
+
+    m_in.m_sched_deadline.endpoint = mp->mp_endpoint;
+    if ((rv = _taskcall(mp->mp_scheduler, SCHEDULING_SCHED_DEADLINE, &m_in))) {
+        return rv;
+    }
+
+    return (OK);
+}
diff -rupNEZbB original/usr/src/minix/servers/pm/table.c solution/usr/src/minix/servers/pm/table.c
--- original/usr/src/minix/servers/pm/table.c	2014-09-13 23:56:50.000000000 +0200
+++ solution/usr/src/minix/servers/pm/table.c	2023-06-01 18:48:44.032388780 +0200
@@ -58,5 +58,6 @@ int (* const call_vec[NR_PM_CALLS])(void
 	CALL(PM_EXEC_RESTART)	= do_execrestart,
 	CALL(PM_GETEPINFO)	= do_getepinfo,		/* getepinfo(2) */
 	CALL(PM_GETPROCNR)	= do_getprocnr,		/* getprocnr(2) */
-	CALL(PM_GETSYSINFO)	= do_getsysinfo		/* getsysinfo(2) */
+	CALL(PM_GETSYSINFO)	= do_getsysinfo,		/* getsysinfo(2) */
+    CALL(PM_SCHED_DEADLINE) = do_sched_deadline /* sched_deadline(2) */ // ab417519
 };
diff -rupNEZbB original/usr/src/minix/servers/sched/main.c solution/usr/src/minix/servers/sched/main.c
--- original/usr/src/minix/servers/sched/main.c	2014-09-13 23:56:50.000000000 +0200
+++ solution/usr/src/minix/servers/sched/main.c	2023-06-01 20:55:56.803753724 +0200
@@ -70,6 +70,10 @@ int main(void)
 		case SCHEDULING_SET_NICE:
 			result = do_nice(&m_in);
 			break;
+        /* ab417519 */
+        case SCHEDULING_SCHED_DEADLINE:
+            result = do_sched_deadline(&m_in);
+            break;
 		case SCHEDULING_NO_QUANTUM:
 			/* This message was sent from the kernel, don't reply */
 			if (IPC_STATUS_FLAGS_TEST(ipc_status,
diff -rupNEZbB original/usr/src/minix/servers/sched/proto.h solution/usr/src/minix/servers/sched/proto.h
--- original/usr/src/minix/servers/sched/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ solution/usr/src/minix/servers/sched/proto.h	2023-06-01 20:57:57.572338178 +0200
@@ -12,6 +12,7 @@ int do_noquantum(message *m_ptr);
 int do_start_scheduling(message *m_ptr);
 int do_stop_scheduling(message *m_ptr);
 int do_nice(message *m_ptr);
+int do_sched_deadline(message *m_ptr); // ab417519
 void init_scheduling(void);
 
 /* utility.c */
diff -rupNEZbB original/usr/src/minix/servers/sched/schedproc.h solution/usr/src/minix/servers/sched/schedproc.h
--- original/usr/src/minix/servers/sched/schedproc.h	2014-09-13 23:56:50.000000000 +0200
+++ solution/usr/src/minix/servers/sched/schedproc.h	2023-06-04 21:04:51.821894483 +0200
@@ -33,6 +33,12 @@ EXTERN struct schedproc {
 	bitchunk_t cpu_mask[BITMAP_CHUNKS(CONFIG_MAX_CPUS)]; /* what CPUs is the
 								process allowed
 								to run on */
+    /* ab417519 */
+    int64_t deadline;
+    int64_t estimate;
+    bool kill;
+    unsigned previous_priority;
+    unsigned used_time;
 } schedproc[NR_PROCS];
 
 /* Flag values */
diff -rupNEZbB original/usr/src/minix/servers/sched/schedule.c solution/usr/src/minix/servers/sched/schedule.c
--- original/usr/src/minix/servers/sched/schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ solution/usr/src/minix/servers/sched/schedule.c	2023-06-04 22:55:50.491222214 +0200
@@ -83,6 +83,22 @@ static void pick_cpu(struct schedproc *
 #endif
 }
 
+/* ab417519 */
+static int64_t get_now(void)
+{
+    clock_t ticks, realtime;
+    time_t boottime;
+    int s;
+
+    if ((s=getuptime(&ticks, &realtime, &boottime)) != OK)
+        panic("get_now couldn't get uptime: %d", s);
+
+    int64_t sec = boottime + (realtime / sys_hz());
+    int64_t nsec = (realtime % sys_hz()) * 1000000000LL / sys_hz();
+    int64_t now_in_ms = sec * 1000LL + nsec / 1000000LL;
+    return now_in_ms;
+}
+
 /*===========================================================================*
  *				do_noquantum				     *
  *===========================================================================*/
@@ -99,8 +115,32 @@ int do_noquantum(message *m_ptr)
 	}
 
 	rmp = &schedproc[proc_nr_n];
-	if (rmp->priority < MIN_USER_Q) {
+
+    if (rmp->priority == DEADLINE_Q) {
+        rmp->used_time += rmp->time_slice;
+        if (rmp->used_time >= rmp->estimate) {
+            if (rmp->kill) {
+                return sys_kill(rmp->endpoint, SIGKILL);
+            } else {
+                rmp->priority = PENALTY_Q;
+            }
+        }
+    }
+
+    /* ab417519 */
+	if (rmp->priority < MIN_USER_Q && rmp->priority != DEADLINE_Q) {
 		rmp->priority += 1; /* lower priority */
+        if (rmp->priority == DEADLINE_Q) {
+            rmp->priority += 1;
+        }
+	}
+
+    /* ab417519 */
+    if (rmp->priority == DEADLINE_Q) {
+        int64_t now = get_now();
+        if (rmp->deadline < now) {
+            rmp->priority = rmp->previous_priority;
+        }
 	}
 
 	if ((rv = schedule_process_local(rmp)) != OK) {
@@ -209,6 +249,11 @@ int do_start_scheduling(message *m_ptr)
 
 		rmp->priority = schedproc[parent_nr_n].priority;
 		rmp->time_slice = schedproc[parent_nr_n].time_slice;
+        rmp->deadline = schedproc[parent_nr_n].deadline;
+        rmp->estimate = schedproc[parent_nr_n].estimate;
+        rmp->kill = schedproc[parent_nr_n].kill;
+        rmp->previous_priority = schedproc[parent_nr_n].previous_priority;
+        rmp->used_time = schedproc[parent_nr_n].used_time;
 		break;
 		
 	default: 
@@ -277,6 +322,11 @@ int do_nice(message *m_ptr)
 		return EINVAL;
 	}
 
+    /* ab417519 */
+    if (new_q == DEADLINE_Q) {
+        new_q -= 1;
+    }
+
 	/* Store old values, in case we need to roll back the changes */
 	old_q     = rmp->priority;
 	old_max_q = rmp->max_priority;
@@ -294,6 +344,69 @@ int do_nice(message *m_ptr)
 	return rv;
 }
 
+/* ab417519 */
+/*===========================================================================*
+ *				do_sched_deadline					     *
+ *===========================================================================*/
+int do_sched_deadline(message *m_ptr)
+{
+    struct schedproc *rmp;
+    int rv;
+    int proc_nr_n;
+    unsigned new_q, old_q, old_max_q;
+
+    /* check who can send you requests */
+    if (!accept_message(m_ptr)) {
+        return EPERM;
+    }
+
+    if (sched_isokendpt(m_ptr->m_sched_deadline.endpoint, &proc_nr_n) != OK) {
+        printf("SCHED: WARNING: got an invalid endpoint in OoQ msg "
+               "%d\n", m_ptr->m_sched_deadline.endpoint);
+        return EBADEPT;
+    }
+
+    /* ab417519 */
+    rmp = &schedproc[proc_nr_n];
+    new_q = DEADLINE_Q;
+
+    int64_t now = get_now();
+    int64_t deadline = m_ptr->m_sched_deadline.deadline;
+    int64_t estimate = m_ptr->m_sched_deadline.estimate;
+    if ((deadline < now + estimate && deadline != -1) || estimate <= 0) {
+        return EINVAL;
+    }
+    // Process is already scheduled using max_by_deadline and is trying to set it again.
+    if (deadline != -1 && rmp->priority == DEADLINE_Q) {
+        return EPERM;
+    }
+    // Process is not scheduled by max_by_deadline and is trying to resign.
+    if (deadline == -1 && rmp->priority != DEADLINE_Q) {
+        return EPERM;
+    }
+
+    /* Store old values, in case we need to roll back the changes */
+    old_q     = rmp->priority;
+
+    /* Update the proc entry and reschedule the process */
+    rmp->priority = (deadline == -1) ? rmp->previous_priority : new_q;
+
+    /* ab417519 */
+    rmp->deadline = deadline;
+    rmp->estimate = estimate;
+    rmp->kill = m_ptr->m_sched_deadline.kill;
+    rmp->used_time = 0;
+    rmp->previous_priority = old_q;
+
+    if ((rv = schedule_process_local(rmp)) != OK) {
+        /* Something went wrong when rescheduling the process, roll
+         * back the changes to proc struct */
+        rmp->priority     = old_q;
+    }
+
+    return rv;
+}
+
 /*===========================================================================*
  *				schedule_process			     *
  *===========================================================================*/
@@ -320,7 +433,7 @@ static int schedule_process(struct sched
 		new_cpu = -1;
 
 	if ((err = sys_schedule(rmp->endpoint, new_prio,
-		new_quantum, new_cpu)) != OK) {
+		new_quantum, new_cpu, rmp->deadline, (rmp->estimate - rmp->used_time))) != OK) {
 		printf("PM: An error occurred when trying to schedule %d: %d\n",
 		rmp->endpoint, err);
 	}
@@ -356,8 +469,12 @@ static void balance_queues(minix_timer_t
 
 	for (proc_nr=0, rmp=schedproc; proc_nr < NR_PROCS; proc_nr++, rmp++) {
 		if (rmp->flags & IN_USE) {
-			if (rmp->priority > rmp->max_priority) {
+			if (rmp->priority > rmp->max_priority && rmp->priority != DEADLINE_Q) {
 				rmp->priority -= 1; /* increase priority */
+                /* ab417519 */
+                if (rmp->priority == DEADLINE_Q) {
+                    rmp->priority -= 1;
+                }
 				schedule_process_local(rmp);
 			}
 		}
